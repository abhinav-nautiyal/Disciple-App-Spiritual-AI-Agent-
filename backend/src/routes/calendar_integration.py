from flask import Blueprint, request, jsonify, session, redirect, url_for
import json
import os
from datetime import datetime, timedelta
import requests

calendar_bp = Blueprint('calendar', __name__)

# Google Calendar API configuration
GOOGLE_CALENDAR_SCOPES = ['https://www.googleapis.com/auth/calendar']
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', 'your-google-client-id')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', 'your-google-client-secret')
GOOGLE_REDIRECT_URI = os.getenv('GOOGLE_REDIRECT_URI', 'http://localhost:5000/api/calendar/callback')

@calendar_bp.route('/auth/google', methods=['GET'])
def google_auth():
    """Initiate Google Calendar OAuth flow"""
    try:
        # In a real implementation, you would use the Google OAuth2 library
        # For this demo, we'll simulate the OAuth flow
        
        auth_url = f"https://accounts.google.com/oauth/authorize?" \
                  f"client_id={GOOGLE_CLIENT_ID}&" \
                  f"redirect_uri={GOOGLE_REDIRECT_URI}&" \
                  f"scope={'%20'.join(GOOGLE_CALENDAR_SCOPES)}&" \
                  f"response_type=code&" \
                  f"access_type=offline"
        
        return jsonify({
            'auth_url': auth_url,
            'message': 'Redirect user to this URL for Google Calendar authorization'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/callback', methods=['GET'])
def google_callback():
    """Handle Google Calendar OAuth callback"""
    try:
        code = request.args.get('code')
        
        if not code:
            return jsonify({'error': 'Authorization code not provided'}), 400
        
        # In a real implementation, exchange the code for access tokens
        # For this demo, we'll simulate successful authentication
        
        # Simulate token exchange
        access_token = f"demo_access_token_{datetime.now().timestamp()}"
        refresh_token = f"demo_refresh_token_{datetime.now().timestamp()}"
        
        # Store tokens securely (in a real app, use proper session management)
        session['google_access_token'] = access_token
        session['google_refresh_token'] = refresh_token
        session['calendar_connected'] = True
        
        return jsonify({
            'message': 'Google Calendar connected successfully',
            'connected': True,
            'access_token': access_token  # Don't return this in production
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/status', methods=['GET'])
def calendar_status():
    """Check Google Calendar connection status"""
    connected = session.get('calendar_connected', False)
    
    return jsonify({
        'connected': connected,
        'provider': 'google_calendar' if connected else None
    })

@calendar_bp.route('/disconnect', methods=['POST'])
def disconnect_calendar():
    """Disconnect Google Calendar"""
    try:
        # Clear session data
        session.pop('google_access_token', None)
        session.pop('google_refresh_token', None)
        session.pop('calendar_connected', None)
        
        return jsonify({
            'message': 'Google Calendar disconnected successfully',
            'connected': False
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/events', methods=['POST'])
def create_calendar_events():
    """Create calendar events for spiritual programs"""
    try:
        if not session.get('calendar_connected'):
            return jsonify({'error': 'Google Calendar not connected'}), 401
        
        data = request.get_json()
        
        required_fields = ['program_type', 'title', 'start_date', 'time', 'duration_days']
        if not all(field in data for field in required_fields):
            return jsonify({'error': 'Missing required fields'}), 400
        
        # Parse the program details
        program_type = data['program_type']
        title = data['title']
        start_date = datetime.fromisoformat(data['start_date'])
        time_str = data['time']  # Format: "HH:MM"
        duration_days = int(data['duration_days'])
        
        # Parse time
        hour, minute = map(int, time_str.split(':'))
        
        events_created = []
        
        # Create daily events for the specified duration
        for i in range(duration_days):
            event_date = start_date + timedelta(days=i)
            event_datetime = event_date.replace(hour=hour, minute=minute)
            
            event_data = {
                'summary': f"{program_type.title()}: {title}",
                'description': f"Daily {program_type} session - {title}\n\nGenerated by DSCPL AI Spiritual Companion",
                'start': {
                    'dateTime': event_datetime.isoformat(),
                    'timeZone': 'America/New_York'  # Default timezone
                },
                'end': {
                    'dateTime': (event_datetime + timedelta(minutes=30)).isoformat(),
                    'timeZone': 'America/New_York'
                },
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'popup', 'minutes': 10},
                        {'method': 'email', 'minutes': 60}
                    ]
                }
            }
            
            # In a real implementation, you would make an API call to Google Calendar
            # For this demo, we'll simulate event creation
            event_id = f"dscpl_event_{program_type}_{i}_{int(datetime.now().timestamp())}"
            
            created_event = {
                'id': event_id,
                'title': event_data['summary'],
                'date': event_date.date().isoformat(),
                'time': time_str,
                'created': True,
                'calendar_id': 'primary'
            }
            
            events_created.append(created_event)
        
        return jsonify({
            'message': f'Successfully created {len(events_created)} calendar events',
            'events': events_created,
            'program': {
                'type': program_type,
                'title': title,
                'duration_days': duration_days,
                'start_date': start_date.date().isoformat()
            }
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/events', methods=['GET'])
def get_calendar_events():
    """Get upcoming spiritual program events from calendar"""
    try:
        if not session.get('calendar_connected'):
            return jsonify({'error': 'Google Calendar not connected'}), 401
        
        # Get date range for query
        start_date = request.args.get('start_date', datetime.now().date().isoformat())
        end_date = request.args.get('end_date', (datetime.now() + timedelta(days=30)).date().isoformat())
        
        # In a real implementation, query Google Calendar API
        # For this demo, return sample events
        sample_events = [
            {
                'id': 'event_1',
                'title': 'Devotion: Dealing with Stress',
                'date': datetime.now().date().isoformat(),
                'time': '07:00',
                'type': 'devotion',
                'status': 'upcoming'
            },
            {
                'id': 'event_2',
                'title': 'Prayer: Morning Prayer',
                'date': (datetime.now() + timedelta(days=1)).date().isoformat(),
                'time': '07:30',
                'type': 'prayer',
                'status': 'upcoming'
            }
        ]
        
        return jsonify({
            'events': sample_events,
            'date_range': {
                'start': start_date,
                'end': end_date
            }
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/events/<event_id>', methods=['DELETE'])
def delete_calendar_event(event_id):
    """Delete a specific calendar event"""
    try:
        if not session.get('calendar_connected'):
            return jsonify({'error': 'Google Calendar not connected'}), 401
        
        # In a real implementation, delete from Google Calendar
        # For this demo, simulate deletion
        
        return jsonify({
            'message': f'Event {event_id} deleted successfully',
            'deleted': True
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/sync', methods=['POST'])
def sync_calendar():
    """Sync spiritual programs with Google Calendar"""
    try:
        if not session.get('calendar_connected'):
            return jsonify({'error': 'Google Calendar not connected'}), 401
        
        data = request.get_json()
        programs = data.get('programs', [])
        
        synced_programs = []
        
        for program in programs:
            # Create calendar events for each program
            events_data = {
                'program_type': program['type'],
                'title': program['title'],
                'start_date': program['start_date'],
                'time': program['time'],
                'duration_days': program['duration_days']
            }
            
            # Simulate event creation (in real implementation, call create_calendar_events)
            synced_program = {
                'id': program.get('id'),
                'type': program['type'],
                'title': program['title'],
                'events_created': int(program['duration_days']),
                'sync_status': 'success'
            }
            
            synced_programs.append(synced_program)
        
        return jsonify({
            'message': f'Successfully synced {len(synced_programs)} programs',
            'synced_programs': synced_programs,
            'sync_timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@calendar_bp.route('/preferences', methods=['GET', 'POST'])
def calendar_preferences():
    """Get or set calendar preferences"""
    if request.method == 'GET':
        # Return current preferences
        preferences = session.get('calendar_preferences', {
            'default_duration': 30,  # minutes
            'reminder_minutes': [10, 60],
            'timezone': 'America/New_York',
            'auto_sync': True
        })
        
        return jsonify({'preferences': preferences})
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Update preferences
            preferences = {
                'default_duration': data.get('default_duration', 30),
                'reminder_minutes': data.get('reminder_minutes', [10, 60]),
                'timezone': data.get('timezone', 'America/New_York'),
                'auto_sync': data.get('auto_sync', True)
            }
            
            session['calendar_preferences'] = preferences
            
            return jsonify({
                'message': 'Calendar preferences updated successfully',
                'preferences': preferences
            })
            
        except Exception as e:
            return jsonify({'error': str(e)}), 500

